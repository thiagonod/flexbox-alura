/*	
	flex-grow: "N"; -> 	Basicamente, divide o espaço livre do flex container, pelo SOMA de flex-gorws de cada 
						flex item desse continer, e distribui partes dessa divisão para cada flex item de 
						acordo com o valor("N") do seu flex-grow. Lembrando que cada flex item de um mesmo 
						flex container, pode ter seu próprio flex-grow, ou seja, em um caso como esse, seria 
						como se cada flex item fosse um "biméstre", e cada biméstre tivesse um 
						"peso(flex-grow)" diferente para calcular a média. 
				Exemplo:
				3 flex itens(FI), 	1ºFI tem flex-grow:3;
									2ºFI tem flex-grow:2;
									3ºFI tem flex-gorw:1;
									total de flex-grows(FG) é 6

				Então temos TODO espaço livre(EL) dividido pelo total de FG(EL/6), o resultado dessa 
				divisão será distribuido para cada FI de acordo com seu FG, ou seja, nesse caso do exemplo
				será emtrege 3 partes para 1ºFI, 2 partes para o 2ºFI e 1 parte para o 3ºFI, sumpondo que 
				o resultado da divisão deu 60px, o 1ºFI teria 30px, 2ºFI 20px e o 3ºFI 10px.

	flex-shrink: "N";-> Aqui no FS, você diz quanto o FI irá DIMINUIR de tamanho em relação ao seu tamanho
						original, levando em conta seu "peso"(flex-shrink"N"). Imagine 2 <DIV>, cada uma com
						100px de width, total de 200px. Imagine que você trocou o display de DESKTOP para
						MOBILE, e agora esse total caiu pela metade, cada <div> tem 50px totalizando 100px.
				Exemplo:
				2 flex itens(FI), 	1ºFI tem flex-shrink:3;	(<div1>)
									2ºFI tem flex-shrink:2;	(<div2>)
							 total de flex-shrinks(FS) é 5

				Foi reduzido 100px do tamanho origianl(200px),temos um espaço reduzido(ER) de 100px,
				portanto ER/FS(100px/5) que resulta(RES) em 20px. 
				Agora o 1ºFI(<div1>) vai ser reduzido em seu tamanho original(TO) por FS*RES, ou seja
				<div1> tinha 100px originalmente, então 100px-3*20px=40px, <div1> vai ter 40px
				<div2> tinha 100px originalmente, então 100px-2*20px=60px, <div2> vai ter 60px
				Basicamnete, a <div1> vai ser reduzida 3 vezes e a <div2> 2 vezes.
				O width de 200px desktop foi para 100px mobile, desses 100px, 40px para <div1> e 60px <div2>.
				As divs eram do mesmo tamnaho(ambas 100), agora foram reduzidas proporcionalmente com seu FS,
		Se você quizer manter a PROPORÇÂO ORIGINAL, 
		basta:
	flex-shrink: 0; isso garante que o FI mantenha sua proporção.

	Quando colocamos display: flex em um elemento, o navegador passa a considerar esse elemento como um 
flex container, ou seja, cria todo aquele comportamento que vimos anteriormente no curso, os filhos ficam 
um do lado do outro e podemos aplicar propriedades para espaçá-los.
	Os filhos de um flex container por sua vez também ganham um nome, são chamados de flex items.

	Quando utilizamos flexbox temos que ficar atentos em quem colocamos as propriedades de espaçamento e 
distribuição do flex. Por exemplo, existem algumas propriedades que devem ser aplicadas à flex container 
e outras que devem ser aplicadas nos flex items.

	Quais são as propriedades que funcionam SOMENTE nos flex container e quais são as 
que funcionam nos flex items?
	
Seguindo a documentação temos:

	container:
		display: flex
		flex-direction
		justify-content
		flex-wrap
		flex-flow
		align-items
		align-content

	flex item:
		order
		flex-grow
		flex-shrink
		flex-basis
		flex
		align-self


--FLUXO DO FLEX--

	Uma caixa FLEX(display: flex;) usa por padrão o FLUXO ROW(linha, horizontal), ou seja, ele posiciona seus
elementos um ao lado do outro em uma linha(tipo inline-block).
	Podemos mudar esse fluxo de linha para COLUMN(coluna, vertical) para posicionar os elementos da caixa flex
verticalmente, um embaixo do outro(tipo block).
	
		-> flex-direction: column;
	
	Assim todos os elementos ficarão alinhados verticalmente em UMA ÚNICA coluna, podendo acontecer desses 
elemetos "estourarem" o limite de espaço onde eles deviam estar posicionados.
	Para resolver esse problema podemos dizer para o flex criar outra coluna para cada elemento dentro da 
caixa, ou que estrapolar o limite definido pelo PAI desse elemento. Definimos o limite com HEIGHT.
	
		-> heigh: 250px; por exemplo
	
	Então usamos:
		
		-> flex-wrap: wrap;
	
	Assim, após 250px, o flex cria outra coluna e continua posicionando os elementos. Podemos simplificar 
toda essa declaração com:
		
		-> flex-flow: column wrap;
	
	que faz o mesmo que os dois comando acima(flex-direction: column; + flex-wrap: wrap;).


--ESPAÇAMENTO DENTRO DE UMA FLEXBOX--

	Usamos justfy-content para DISTRIBUIR o espaço entre os elementos de uma caixa. Podemos distribuir os 
elementos dentro do pai de diversas formas, podemos por exemplo:

	Colocar todo espaço à esquerda, jogando o conteúdo para direita com 
		
		-> justify-content: flex-end;

	Colocar todo espaço à direita, jogando o conteúdo para esquerda com

		-> justify-content: flex-start; (que é o padrão).

	Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio com 

		-> justify-content: center;

	Colocar todo espaço entre os elementos como vimos antes usando 

		-> justify-content: space-between;

	E uma possibilidade bem interessante também é colocar o espaço em volta dos elementos. Podemos usar o 

		-> justify-content: space-around; para isso.
	
--------------------------------------------------------------------------------------------------------------

	cabecalhoPrincipal -> PAI
	container -> FILHO
	
	nesse caso especificamos explicitamente que queremos CONTAINER que esta dentro de CABECALHO...
ou seja, ira aplicar o FLEX a TODOS os FILHOS de container, tudo o que estive dentro desse elemento,
no caso o H1 e o NAV.
	
	Sempre devemos colocar o FLEX no PAI para aplicar os efeitos nos FILHOS desse pai.
*/
.cabecalhoPrincipal .container {
	display: flex;/*indica que iremos usar uma caixa flex, PADRÂO ROW*/
	align-items: center;/*alinha os itens da caixa centralizados VERTICALMENTE*/
	
	/*até aqui, todos elementos(H1, nav) estão alinhados um do lado do outro na parte ESQUERDA,
	isso criou um ESPAÇO em branco na parte DIREITA.*/
	
	justify-content: space-between;/*pega todo o ESPAÇO em BRANCO que estiver sobrando, 
	e divide entre os elementos que estão dentro do flex.*/

	/*agora temos H1 na parte esquerda, o espaço em branco, NAV na parte direita*/
}
.cabecalhoPrincipal-nav {/*adicionado FLEX na nav para alinhar os LINKS(<a>)*/
	display: flex;
}



/* Layout do conteudo principal NOSSOS CURSOS(<nav>) */
/*pai(<ul>) filhos(<li> <a>)*/
.conteudoPrincipal-cursos {
	display: flex;
	flex-wrap: wrap;
	/*justify-content: flex-start;*//*Na minha máquina funcionou, no exercício nçao tem.*/
}
/*
quebramos o wigth em 4, porém com uma folga, 100%/4=25%, usamos 23%, assim sobra 2% para cada lado,
formamos um GRID de 4 colunas, cada uma com 1%23%1%,
distribuição dos elementos do GRID:
n1  n2  n3  n4
n5  n6  n7  n8
n9  n10 n11 n12
n13 n14 n...
até acabar o numero de elementos na caixa flex;
*/
/*pai(<li>) filhos(<a>)*/
.conteudoPrincipal-cursos-link {
	width: 23%;
	/*margin: 1%;*//*No exercicio tem essa margem, porem na minha maquina buga o layout*/
}
/*Removendo a margem direita de todo 4º elemento no GRID[nth-child(4n)], ou seja, elementos da DIREITA*/
/*n começa no 0, sendo n0+4=n4, ai vai de 4 em 4 -> n4, n8, n12, n16, n...*/
.conteudoPrincipal-cursos-link:nth-child(4n) {
	margin-right: 0;
}
/*Removendo a margem esquerda de todo 4º+1 elemento, ou seja 5º, elementos que ficam na ESQUERDA do GRID*/
/*n começa 0, sendo n0+1=n1, ai vai de 4 em 4 -> n1, n5, n9, n13, n17, n21, n...*/
.conteudoPrincipal-cursos-link:nth-child(4n+1) {
	margin-left: 0;
}


/*Layout VIDEO*/
.videoSobre .container {
	display: flex;
}
.videoSobre-sobre {
	text-align: center;
	display: flex;
	flex-direction: column;
	flex-grow: 2;/*distribui 2 partes do width total para cada FLEX ITEM do flex container*/
}
.videoSobre-sobre-list{
	flex-grow: 1;
}
.videoSobre {
	flex-grow: 1;
	flex-shrink: 2;/*diz que esse flexitem  tem que DIMINUIR 2 partes em relação aos outros flexitens*/ 
}


/* Layout MAPA DE CURSOS(<nav>)*/
/*pai(<nav>) filhos(<h4> <a>)*/
.rodapePrincipal-navMap-list {
	display: flex;
	height: 250px;/* altura máxima do elemento(<nav>) */
	flex-flow: column wrap;/*muda o FLUXO para VERTICAL(column), criando outra coluna a cada 250px*/	
}



/* Layout do footer*/
/*colocando patrocinadores(<ul>) na ESQUERDA, formulário(<form>) na DIREITA*/
.rodapePrincipal-patrocinadores .container {
	display: flex;
	justify-content: space-between;
}
/*Alinhado elementos da <ul> as LOGOS do footer*/
.rodapePrincipal-patrocinadores-list {
	width: 70%;/*deixando 70% da tela para as LOGOS*/
	margin-right: 5%;/*coloca uma margin de 5% entre as logos e o formulário, evita que encostem*/
 	display: flex;
	align-items: center;
	justify-content: space-around;/*coloca o espaço ENVOLTA dos elementos*/
}
/*Alinhando elementos do FORMULÁRIO(<form>) <fieldset> <div>*/
.rodapePrincipal-contatoForm-fieldset {
	width: 25%;/*deixando 25% da tela para o FORMULÁRIO*/
	display: flex;/* faz que o ENVIAR(submit) fique da mesma altura do campo EMAIL(type:"email")*/
}

/*--------------------------PARTE MOBILE------------------------------*/
/*
	Para selecionar o que é mobile e o que não é, podemos diferenciar pelo tamanho do display,
no caso, podemos pegar o width máximo do display, como por exemplo, considerar que até 768px é mobile,
o que passar disso é desktop.
	Para isso podemos usar uma MIDIA QUERY -> @media(max-width: 768px)

	Para trabalhar com layout mobile, basicamente temos que trocar tudo que for ROW(linha) para 
COLUMN(coluna), ou seja, trocar o alinhamento dos elementos de "LADO a LADO" para "UM em CIMA do outro", 
e também, todos os widths para ocupar o display inteiro(width: 100%;).
*/
@media(max-width: 768px) {
	/*Layout header(<nav>), menu de navegação do topo*/
	.cabecalhoPrincipal-nav {
	    flex-direction:column;/*mudando <a> de ROW para COLUMN*/
	}
	/*Mudando layout dos <h1>, <a1>...dentro da div container*/
	.cabecalhoPrincipal .container{
	  flex-direction: column;/*mudando de ROW para COLUMN*/ 
	  align-items: initial;/*volta ao padrão inicial*/
	  text-align: center;
	}
	/*Mudando a ordem dos links do menu, colocando link NOSSO APP em 1º*/
	.cabecalhoPrincipal-nav-link-app {
		order: -1;/*por padrão, todo elemento tem order 0*/
	}


	/*Layout conteudo pricipal NOSSOS CURSOS*/
	/*pai(<ul>) filhos(<li> <a>)*/
	.conteudoPrincipal-cursos {
		flex-direction: column;
	}
	/*pai(<li>) filhos(<a>)*/
	.conteudoPrincipal-cursos-link {
		width: 100%;
	}

	
	/*Layout VIDEO*/
	.videoSobre .container {
		flex-direction: column;
	}
	.videoSobre-video {
		margin: 0 auto; /*top bottom = 0 | left right = auto*/
	}


	/*Layout MAPA DE CURSOS*/
	/*ele já esta em COLUMN, basta apenas mudar o limite de comprimento(height) que tinhamos posto 250px*/
	/*pai(<nav>) filhos(<h4> <a>)*/
	.rodapePrincipal-navMap-list {
		height: auto;
	}


	/*Layout FOOTER*/
	/*pai(container) filhos(logos form)*/
	.rodapePrincipal-patrocinadores .container {
		flex-direction: column;
		align-items: center;
	}
	/*LOGOS*/
	.rodapePrincipal-patrocinadores-list{
		margin: 0;
		width: 100%;
	}
	/*FORMULÁRIO*/
	.rodapePrincipal-contatoForm-fieldset {
		margin: 0;
		width: 100%;
		justify-content: center;
	}
}